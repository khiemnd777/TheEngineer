using System.Linq;
using System.Dynamic;
using System.Collections;
using System.Collections.Generic;
using Microsoft.Scripting.Hosting;
using UnityEngine;
using UnityEngine.UI;

[RequireComponent(typeof(Rigidbody2D))]
public class Scriptable : MonoBehaviour
{
    public string script;
    public bool stoppable;

    public ScriptEngine engine;
    public ScriptScope scope;
    public ScriptRuntime runtime;

    public Pixel pixel;

    void Start()
    {
        stoppable = true;
        engine = UnityPython.CreateEngine();

        StartCoroutine(UpdatingUnityVariables());
        StartCoroutine(SyncPythonVariablesAndUnityVariables());
    }

    void Update()
    {
        if (stoppable)
            return;
        ExecuteFunc<System.Action>("__update", (act, args) =>
        {
            act.Invoke();
            // StorePythonVariables();
        });
    }

    void FixedUpdate()
    {
        if (stoppable)
            return;
        ExecuteFunc<System.Action>("__fixedupdate", (act, args) =>
        {
            act.Invoke();
            // StorePythonVariables();
        });
    }

    void OnMouseUp()
    {
        if (Input.GetMouseButtonUp(0))
        {
            ScriptManager.instance.SetScriptable(this, script);
            ScriptManager.instance.SetActivePanel(true);

            ExecuteFunc<System.Action>("__onleftmouseup", (act, args) =>
            {
                act.Invoke();
            });
        }

        if (Input.GetMouseButtonUp(1))
        {
            ExecuteFunc<System.Action>("__onrightmouseup", (act, args) =>
            {
                act.Invoke();
            });
        }
    }

    void OnMouseDown()
    {
        if (Input.GetMouseButtonDown(0))
        {
            ExecuteFunc<System.Action>("__onleftmousedown", (act, args) =>
            {
                act.Invoke();
            });
        }
        if (Input.GetMouseButtonDown(1))
        {
            ExecuteFunc<System.Action>("__onrightmousedown", (act, args) =>
            {
                act.Invoke();
            });
        }
    }

    public void SetScript(string script)
    {
        this.script = script;
    }

    public void ExecuteScript()
    {
        runtime = engine.Runtime;
        scope = runtime.CreateScope();

        var scriptContent = GetScriptHeader();
        scriptContent += script;

        // create script source from content
        var source = engine.CreateScriptSourceFromString(scriptContent);

        // include unity variables
        IncludeVariables();
        // updated unity variables
        UpdateUnityVariables();
        // include python variables
        IncludePythonVariables();
        try
        {
            // execute python script
            source.Execute(scope);
            // store python variables
            StorePythonVariables();
        }
        catch (System.Exception exc)
        {
            Debug.LogError(exc);
        }
        runtime.Shutdown();
        this.stoppable = false;
    }

    public void SetStoppable(bool stoppable)
    {
        this.stoppable = stoppable;
        if (stoppable)
            if (!runtime.IsNull())
                runtime.Shutdown();
    }

    string GetScriptHeader()
    {
        var content = "#Generated by IronPython 2.6.2\n";
        content += "from UnityEngine import Debug as debug\n";
        return content;
    }

    public virtual void IncludeVariables()
    {
        // Position of scriptable object
        scope.SetVariable("position", ExpandoObjectUtility.GetVariable(pixel.pythonPixel, "position"));

        // Create Pixel
        scope.SetVariable("__create", new System.Action<string, float, float, string, string>((name, x, y, scriptableName, parentName) =>
        {
            var pixelPrefab = Resources.Load<Pixel>(Constants.PIXEL_PREFAB);
            if (pixelPrefab.IsNull())
                return;

            var objs = GameObject.FindGameObjectsWithTag("Pixel");
            var objsWithName = objs.Where(go => name.Equals(go.name));
            Pixel pixelObj = null;
            if (objsWithName.Any())
            {
                var firstObjsWithName = objsWithName.FirstOrDefault();
                pixelObj = Instantiate(pixelPrefab, new Vector2(x, y), Quaternion.identity, firstObjsWithName.transform);

            }
            else
            {
                pixelObj = Instantiate(pixelPrefab, new Vector2(x, y), Quaternion.identity);
            }

            if (!pixelObj.IsNull())
            {
                pixelObj.name = name;
                // pixelObj.scriptable
                // Find scriptable from hierachy
                if (!string.IsNullOrEmpty(scriptableName))
                {
                    var scriptableGO = GameObject.Find("Scriptable/" + scriptableName);
                    if (!scriptableGO.IsNull())
                    {
                        var scriptable = scriptableGO.GetComponent<Scriptable>();
                        pixelObj.AddScriptable(scriptable);
                        scriptable = null;
                    }
                    scriptableGO = null;
                }
                pixelObj = null;
            }
            pixelPrefab = null;
        }));

        // Find Pixels
        scope.SetVariable("__find", new System.Func<string, object>((name) =>
        {
            var objs = FindObjectsOfType<Pixel>();
            var objsWithName = objs.FirstOrDefault(go => name.Equals(go.name));
            objs = null;
            if (objsWithName.IsNull())
                return null;
            return objsWithName.pythonPixel;
        }));

        scope.SetVariable("__setparent", new System.Action<string>((parentName) => {
            var objs = FindObjectsOfType<Pixel>();
            var objWithName = objs.FirstOrDefault(go => parentName.Equals(go.name));
            objs = null;
            if(objWithName.IsNull())
                return;
            this.pixel.transform.SetParent(objWithName.transform);
        }));
    }

    void UpdateUnityVariables()
    {
        // Time
        scope.SetVariable("__deltatime", Time.deltaTime);
        scope.SetVariable("__fixeddeltatime", Time.fixedDeltaTime);
        scope.SetVariable("__fixedtime", Time.fixedTime);
        scope.SetVariable("__framecount", Time.frameCount);
        scope.SetVariable("__time", Time.time);
        scope.SetVariable("__timescale", Time.timeScale);

        // Mouse position
        var mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        scope.SetVariable("__mouseposition", new Position
        {
            x = mousePosition.x,
            y = mousePosition.y
        });
    }

    void ExecuteFunc<TAction>(string name, System.Action<TAction, object[]> action, params object[] args)
    {
        if (scope.IsNull())
            return;
        try
        {
            TAction act;
            if (scope.TryGetVariable<TAction>(name, out act))
            {
                if (act != null)
                {
                    action.Invoke(act, args);
                }
            }
        }
        catch
        {
            // if source executes out any error.
        }
    }

    void StorePythonVariables()
    {
        if (scope.IsNull())
            return;
        var items = scope.GetItems();
        items = items.Where(x => !x.Key.StartsWith("__"));
        foreach (var pyVar in items)
        {
            ExpandoObjectUtility.SetVariable(pixel.pythonPixel, pyVar.Key, pyVar.Value);
        }
    }

    void IncludePythonVariables()
    {
        if (scope.IsNull())
            return;
        var pythonVariables = pixel.pythonPixel as IDictionary<string, object>;
        foreach (var pyVar in pythonVariables)
        {
            scope.SetVariable(pyVar.Key, pyVar.Value);
        }
    }

    IEnumerator SyncPythonVariablesAndUnityVariables()
    {
        while (!gameObject.IsNull())
        {
            yield return null;
            if (!gameObject.activeSelf)
                continue;
            if (stoppable)
                continue;
            if (scope.IsNull())
                continue;
            System.Action update;
            System.Action fixedUpdate;
            if (scope.TryGetVariable("__update", out update)
                || scope.TryGetVariable("__fixedupdate", out fixedUpdate))
            {
                StorePythonVariables();
            }
            update = null;
            fixedUpdate = null;
        }
    }

    IEnumerator UpdatingUnityVariables()
    {
        while (!gameObject.IsNull())
        {
            yield return null;
            if (stoppable)
                continue;
            if (scope.IsNull())
                continue;
            System.Action update;
            System.Action fixedUpdate;
            if (scope.TryGetVariable("__update", out update)
                || scope.TryGetVariable("__fixedupdate", out fixedUpdate))
            {
                UpdateUnityVariables();
            }
            update = null;
            fixedUpdate = null;
        }
    }
}