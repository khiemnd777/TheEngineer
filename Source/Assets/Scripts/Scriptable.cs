using System.Linq;
using System.Collections;
using System.Collections.Generic;
using Microsoft.Scripting.Hosting;
using UnityEngine;
using UnityEngine.UI;

[RequireComponent(typeof(Rigidbody2D))]
public class Scriptable : MonoBehaviour
{
    public string script;
    public bool stoppable;

    public ScriptEngine engine;
    public ScriptScope scope;
    public ScriptRuntime runtime;

    public List<KeyValuePair<string, object>> pythonVariables = new List<KeyValuePair<string, object>>();

    void Start()
    {
        stoppable = true;
        engine = UnityPython.CreateEngine();

        StartCoroutine(GetPosition());
        StartCoroutine(UpdatingUnityVariables());

        pythonVariables.Add(new KeyValuePair<string, object>("position", new Position{
            x = transform.position.x,
            y = transform.position.y
        }));

        ScriptManager.instance.AddWrappedScriptable(new scriptable
        {
            id = GetInstanceID(),
            position = new Position
            {
                x = transform.position.x,
                y = transform.position.y
            }
        });
    }

    void Update()
    {
        if (stoppable)
            return;
        ExecuteFunc<System.Action>("__update", (act, args) =>
        {
            act.Invoke();
        });
    }

    void FixedUpdate()
    {
        if (stoppable)
            return;
        ExecuteFunc<System.Action>("__fixed_update", (act, args) =>
        {
            act.Invoke();
        });
    }

    void OnMouseUp()
    {
        if (Input.GetMouseButtonUp(0))
        {
            ScriptManager.instance.SetScriptable(this, script);
            ScriptManager.instance.SetActivePanel(true);

            ExecuteFunc<System.Action>("__on_left_mouse_up", (act, args) =>
            {
                act.Invoke();
            });
        }

        if (Input.GetMouseButtonUp(1))
        {
            ExecuteFunc<System.Action>("__on_right_mouse_up", (act, args) =>
            {
                act.Invoke();
            });
        }
    }

    void OnMouseDown()
    {
        if (Input.GetMouseButtonDown(0))
        {
            ExecuteFunc<System.Action>("__on_left_mouse_down", (act, args) =>
            {
                act.Invoke();
            });
        }
        if (Input.GetMouseButtonDown(1))
        {
            ExecuteFunc<System.Action>("__on_right_mouse_down", (act, args) =>
            {
                act.Invoke();
            });
        }
    }

    public void SetScript(string script)
    {
        this.script = script;
    }

    public void ExecuteScript()
    {
        runtime = engine.Runtime;
        scope = runtime.CreateScope();

        var scriptContent = GetScriptHeader();
        scriptContent += script;

        // create script source from content
        var source = engine.CreateScriptSourceFromString(scriptContent);

        // include unity variables
        IncludeUnityVariables();
        // updated unity variables
        UpdateUnityVariables();
        // include python variables
        IncludePythonVariables();
        try
        {
            // execute python script
            source.Execute(scope);
            // store python variables
            StorePythonVariables();
        }
        catch (System.Exception exc)
        {
            Debug.LogError(exc);
        }
        runtime.Shutdown();
        this.stoppable = false;
    }

    public void SetStoppable(bool stoppable)
    {
        this.stoppable = stoppable;
        if (stoppable)
            if (!runtime.IsNull())
                runtime.Shutdown();
    }

    string GetScriptHeader()
    {
        var content = "#Generated by IronPython 2.6.2\n";
        content += "from UnityEngine import Debug as debug\n";
        return content;
    }

    public virtual void IncludeUnityVariables()
    {
        // Position of scriptable object
        scope.SetVariable("position", new Position
        {
            x = transform.position.x,
            y = transform.position.y
        });

        // Find
        scope.SetVariable("find", new System.Func<string, object>((name) =>
        {
            var objs = FindObjectsOfType<Scriptable>();
            var objsWithName = objs.Where(go => name.Equals(go.name));
            return objsWithName.ToArray();
        }));
    }

    void UpdateUnityVariables()
    {
        // Time
        scope.SetVariable("delta_time", Time.deltaTime);
        scope.SetVariable("fixed_delta_time", Time.fixedDeltaTime);
        scope.SetVariable("fixed_time", Time.fixedTime);
        scope.SetVariable("frame_count", Time.frameCount);
        scope.SetVariable("time", Time.time);
        scope.SetVariable("time_scale", Time.timeScale);

        // Mouse position
        var mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        scope.SetVariable("mouse_position", new Position
        {
            x = mousePosition.x,
            y = mousePosition.y
        });
    }

    void ExecuteFunc<TAction>(string name, System.Action<TAction, object[]> action, params object[] args)
    {
        if (scope.IsNull())
            return;
        try
        {
            TAction act;
            if (scope.TryGetVariable<TAction>(name, out act))
            {
                if (act != null)
                {
                    action.Invoke(act, args);
                }
            }
        }
        catch
        {
            // if source executes out any error.
        }
    }

    void StorePythonVariables()
    {
        if (scope.IsNull())
            return;
        pythonVariables.Clear();
        var items = scope.GetItems();
        items = items.Where(x => !x.Key.StartsWith("__"));
        pythonVariables = scope.GetItems().ToList();
    }

    void IncludePythonVariables()
    {
        if(scope.IsNull())
            return;
        if(!pythonVariables.Any())
            return;
        foreach(var pyVar in pythonVariables){
            scope.SetVariable(pyVar.Key, pyVar.Value);
        }
    }

    IEnumerator GetPosition()
    {
        while (!gameObject.IsNull())
        {
            yield return null;
            if (!gameObject.activeSelf)
                continue;
            if (stoppable)
                continue;
            if (scope.IsNull())
                continue;
            var position = scope.GetVariable<Position>("position");
            transform.position = new Vector3(position.x, position.y, 0f);
        }
    }

    IEnumerator UpdatingUnityVariables()
    {
        while (!gameObject.IsNull())
        {
            yield return null;
            if (stoppable)
                continue;
            if (scope.IsNull())
                continue;
            UpdateUnityVariables();
        }
    }
}

// Wrapped scriptable object for Python
public class scriptable
{
    public int id { get; set; }
    public int name { get; set; }
    public Position position { get; set; }
}